'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _jsItertools = require('@aureooms/js-itertools');

var _jsMapping = require('@aureooms/js-mapping');

var variants = {

	// standard ``base32''
	'RFC4648': {
		'alphabet': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
		'padding': '='
	},

	// also RFC4648 (used by NSEC3)
	// ``encoded data maintains its sort order when the encoded data is compared bit-wise''
	'base32hex': {
		'alphabet': '0123456789ABCDEFGHIJKLMNOPQRSTUV',
		'padding': '='
	},

	// ``easier for human use and more compact''
	'z-base-32': {
		'alphabet': 'ybndrfg8ejkmcpqxot1uwisza345h769',
		'padding': false
	},

	// It excludes the letters I, L, and O to avoid confusion with digits. It
	// also excludes the letter U to reduce the likelihood of accidental
	// obscenity.
	// See http://www.crockford.com/wrmg/base32.html
	'crockford': {
		'alphabet': '0123456789ABCDEFGHJKMNPQRSTVWXYZ',
		'padding': false,
		'index': {
			'0': 0,
			'o': 0,
			'O': 0,
			'1': 1,
			'i': 1,
			'I': 1,
			'l': 1,
			'L': 1,
			'2': 2,
			'3': 3,
			'4': 4,
			'5': 5,
			'6': 6,
			'7': 7,
			'8': 8,
			'9': 9,
			'a': 10,
			'A': 10,
			'b': 11,
			'B': 11,
			'c': 12,
			'C': 12,
			'd': 13,
			'D': 13,
			'e': 14,
			'E': 14,
			'f': 15,
			'F': 15,
			'g': 16,
			'G': 16,
			'h': 17,
			'H': 17,
			'j': 18,
			'J': 18,
			'k': 19,
			'K': 19,
			'm': 20,
			'M': 20,
			'n': 21,
			'N': 21,
			'p': 22,
			'P': 22,
			'q': 23,
			'Q': 23,
			'r': 24,
			'R': 24,
			's': 25,
			'S': 25,
			't': 26,
			'T': 26,
			'v': 27,
			'V': 27,
			'w': 28,
			'W': 28,
			'x': 29,
			'X': 29,
			'y': 30,
			'Y': 30,
			'z': 31,
			'Z': 31
		}
	}

};

for (var variant in variants) {
	if (variants[variant].index) continue;
	variants[variant].index = (0, _jsMapping.object)((0, _jsMapping.reflect)((0, _jsItertools.enumerate)(variants[variant].alphabet)));
}

variants['default'] = variants['base32'] = variants['RFC3548'] = variants['RFC4648'];
variants['RFC2938'] = variants['base32hex'];
variants['Crockford'] = variants['crockford'];

exports.default = variants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YXJpYW50cy5qcyJdLCJuYW1lcyI6WyJ2YXJpYW50cyIsInZhcmlhbnQiLCJpbmRleCIsImFscGhhYmV0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXOztBQUVoQjtBQUNBLFlBQVk7QUFDWCxjQUFhLGtDQURGO0FBRVgsYUFBWTtBQUZELEVBSEk7O0FBUWhCO0FBQ0E7QUFDQSxjQUFjO0FBQ2IsY0FBYSxrQ0FEQTtBQUViLGFBQVk7QUFGQyxFQVZFOztBQWVoQjtBQUNBLGNBQWM7QUFDYixjQUFhLGtDQURBO0FBRWIsYUFBWTtBQUZDLEVBaEJFOztBQXFCaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2IsY0FBYSxrQ0FEQTtBQUViLGFBQVksS0FGQztBQUdiLFdBQVU7QUFDVCxRQUFNLENBREc7QUFFVCxRQUFNLENBRkc7QUFHVCxRQUFNLENBSEc7QUFJVCxRQUFNLENBSkc7QUFLVCxRQUFNLENBTEc7QUFNVCxRQUFNLENBTkc7QUFPVCxRQUFNLENBUEc7QUFRVCxRQUFNLENBUkc7QUFTVCxRQUFNLENBVEc7QUFVVCxRQUFNLENBVkc7QUFXVCxRQUFNLENBWEc7QUFZVCxRQUFNLENBWkc7QUFhVCxRQUFNLENBYkc7QUFjVCxRQUFNLENBZEc7QUFlVCxRQUFNLENBZkc7QUFnQlQsUUFBTSxDQWhCRztBQWlCVCxRQUFNLEVBakJHO0FBa0JULFFBQU0sRUFsQkc7QUFtQlQsUUFBTSxFQW5CRztBQW9CVCxRQUFNLEVBcEJHO0FBcUJULFFBQU0sRUFyQkc7QUFzQlQsUUFBTSxFQXRCRztBQXVCVCxRQUFNLEVBdkJHO0FBd0JULFFBQU0sRUF4Qkc7QUF5QlQsUUFBTSxFQXpCRztBQTBCVCxRQUFNLEVBMUJHO0FBMkJULFFBQU0sRUEzQkc7QUE0QlQsUUFBTSxFQTVCRztBQTZCVCxRQUFNLEVBN0JHO0FBOEJULFFBQU0sRUE5Qkc7QUErQlQsUUFBTSxFQS9CRztBQWdDVCxRQUFNLEVBaENHO0FBaUNULFFBQU0sRUFqQ0c7QUFrQ1QsUUFBTSxFQWxDRztBQW1DVCxRQUFNLEVBbkNHO0FBb0NULFFBQU0sRUFwQ0c7QUFxQ1QsUUFBTSxFQXJDRztBQXNDVCxRQUFNLEVBdENHO0FBdUNULFFBQU0sRUF2Q0c7QUF3Q1QsUUFBTSxFQXhDRztBQXlDVCxRQUFNLEVBekNHO0FBMENULFFBQU0sRUExQ0c7QUEyQ1QsUUFBTSxFQTNDRztBQTRDVCxRQUFNLEVBNUNHO0FBNkNULFFBQU0sRUE3Q0c7QUE4Q1QsUUFBTSxFQTlDRztBQStDVCxRQUFNLEVBL0NHO0FBZ0RULFFBQU0sRUFoREc7QUFpRFQsUUFBTSxFQWpERztBQWtEVCxRQUFNLEVBbERHO0FBbURULFFBQU0sRUFuREc7QUFvRFQsUUFBTSxFQXBERztBQXFEVCxRQUFNLEVBckRHO0FBc0RULFFBQU0sRUF0REc7QUF1RFQsUUFBTSxFQXZERztBQXdEVCxRQUFNLEVBeERHO0FBeURULFFBQU0sRUF6REc7QUEwRFQsUUFBTSxFQTFERztBQTJEVCxRQUFNLEVBM0RHO0FBNERULFFBQU07QUE1REc7QUFIRzs7QUF6QkUsQ0FBakI7O0FBOEZBLEtBQU0sSUFBTUMsT0FBWixJQUF1QkQsUUFBdkIsRUFBa0M7QUFDakMsS0FBS0EsU0FBU0MsT0FBVCxFQUFrQkMsS0FBdkIsRUFBK0I7QUFDL0JGLFVBQVNDLE9BQVQsRUFBa0JDLEtBQWxCLEdBQTBCLHVCQUFRLHdCQUFTLDRCQUFXRixTQUFTQyxPQUFULEVBQWtCRSxRQUE3QixDQUFULENBQVIsQ0FBMUI7QUFDQTs7QUFFREgsU0FBUyxTQUFULElBQXNCQSxTQUFTLFFBQVQsSUFBcUJBLFNBQVMsU0FBVCxJQUFzQkEsU0FBUyxTQUFULENBQWpFO0FBQ0FBLFNBQVMsU0FBVCxJQUFzQkEsU0FBUyxXQUFULENBQXRCO0FBQ0FBLFNBQVMsV0FBVCxJQUF3QkEsU0FBUyxXQUFULENBQXhCOztrQkFFZUEsUSIsImZpbGUiOiJ2YXJpYW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVudW1lcmF0ZSB9IGZyb20gJ0BhdXJlb29tcy9qcy1pdGVydG9vbHMnIDtcblxuaW1wb3J0IHsgb2JqZWN0ICwgcmVmbGVjdCB9IGZyb20gJ0BhdXJlb29tcy9qcy1tYXBwaW5nJyA7XG5cbmNvbnN0IHZhcmlhbnRzID0ge1xuXG5cdC8vIHN0YW5kYXJkIGBgYmFzZTMyJydcblx0J1JGQzQ2NDgnIDoge1xuXHRcdCdhbHBoYWJldCcgOiAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjcnICxcblx0XHQncGFkZGluZycgOiAnPScgLFxuXHR9ICxcblxuXHQvLyBhbHNvIFJGQzQ2NDggKHVzZWQgYnkgTlNFQzMpXG5cdC8vIGBgZW5jb2RlZCBkYXRhIG1haW50YWlucyBpdHMgc29ydCBvcmRlciB3aGVuIHRoZSBlbmNvZGVkIGRhdGEgaXMgY29tcGFyZWQgYml0LXdpc2UnJ1xuXHQnYmFzZTMyaGV4JyA6IHtcblx0XHQnYWxwaGFiZXQnIDogJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWJyAsXG5cdFx0J3BhZGRpbmcnIDogJz0nICxcblx0fSAsXG5cblx0Ly8gYGBlYXNpZXIgZm9yIGh1bWFuIHVzZSBhbmQgbW9yZSBjb21wYWN0Jydcblx0J3otYmFzZS0zMicgOiB7XG5cdFx0J2FscGhhYmV0JyA6ICd5Ym5kcmZnOGVqa21jcHF4b3QxdXdpc3phMzQ1aDc2OScgLFxuXHRcdCdwYWRkaW5nJyA6IGZhbHNlICxcblx0fSAsXG5cblx0Ly8gSXQgZXhjbHVkZXMgdGhlIGxldHRlcnMgSSwgTCwgYW5kIE8gdG8gYXZvaWQgY29uZnVzaW9uIHdpdGggZGlnaXRzLiBJdFxuXHQvLyBhbHNvIGV4Y2x1ZGVzIHRoZSBsZXR0ZXIgVSB0byByZWR1Y2UgdGhlIGxpa2VsaWhvb2Qgb2YgYWNjaWRlbnRhbFxuXHQvLyBvYnNjZW5pdHkuXG5cdC8vIFNlZSBodHRwOi8vd3d3LmNyb2NrZm9yZC5jb20vd3JtZy9iYXNlMzIuaHRtbFxuXHQnY3JvY2tmb3JkJyA6IHtcblx0XHQnYWxwaGFiZXQnIDogJzAxMjM0NTY3ODlBQkNERUZHSEpLTU5QUVJTVFZXWFlaJyAsXG5cdFx0J3BhZGRpbmcnIDogZmFsc2UgLFxuXHRcdCdpbmRleCcgOiB7XG5cdFx0XHQnMCcgOiAwLFxuXHRcdFx0J28nIDogMCxcblx0XHRcdCdPJyA6IDAsXG5cdFx0XHQnMScgOiAxLFxuXHRcdFx0J2knIDogMSxcblx0XHRcdCdJJyA6IDEsXG5cdFx0XHQnbCcgOiAxLFxuXHRcdFx0J0wnIDogMSxcblx0XHRcdCcyJyA6IDIsXG5cdFx0XHQnMycgOiAzLFxuXHRcdFx0JzQnIDogNCxcblx0XHRcdCc1JyA6IDUsXG5cdFx0XHQnNicgOiA2LFxuXHRcdFx0JzcnIDogNyxcblx0XHRcdCc4JyA6IDgsXG5cdFx0XHQnOScgOiA5LFxuXHRcdFx0J2EnIDogMTAsXG5cdFx0XHQnQScgOiAxMCxcblx0XHRcdCdiJyA6IDExLFxuXHRcdFx0J0InIDogMTEsXG5cdFx0XHQnYycgOiAxMixcblx0XHRcdCdDJyA6IDEyLFxuXHRcdFx0J2QnIDogMTMsXG5cdFx0XHQnRCcgOiAxMyxcblx0XHRcdCdlJyA6IDE0LFxuXHRcdFx0J0UnIDogMTQsXG5cdFx0XHQnZicgOiAxNSxcblx0XHRcdCdGJyA6IDE1LFxuXHRcdFx0J2cnIDogMTYsXG5cdFx0XHQnRycgOiAxNixcblx0XHRcdCdoJyA6IDE3LFxuXHRcdFx0J0gnIDogMTcsXG5cdFx0XHQnaicgOiAxOCxcblx0XHRcdCdKJyA6IDE4LFxuXHRcdFx0J2snIDogMTksXG5cdFx0XHQnSycgOiAxOSxcblx0XHRcdCdtJyA6IDIwLFxuXHRcdFx0J00nIDogMjAsXG5cdFx0XHQnbicgOiAyMSxcblx0XHRcdCdOJyA6IDIxLFxuXHRcdFx0J3AnIDogMjIsXG5cdFx0XHQnUCcgOiAyMixcblx0XHRcdCdxJyA6IDIzLFxuXHRcdFx0J1EnIDogMjMsXG5cdFx0XHQncicgOiAyNCxcblx0XHRcdCdSJyA6IDI0LFxuXHRcdFx0J3MnIDogMjUsXG5cdFx0XHQnUycgOiAyNSxcblx0XHRcdCd0JyA6IDI2LFxuXHRcdFx0J1QnIDogMjYsXG5cdFx0XHQndicgOiAyNyxcblx0XHRcdCdWJyA6IDI3LFxuXHRcdFx0J3cnIDogMjgsXG5cdFx0XHQnVycgOiAyOCxcblx0XHRcdCd4JyA6IDI5LFxuXHRcdFx0J1gnIDogMjksXG5cdFx0XHQneScgOiAzMCxcblx0XHRcdCdZJyA6IDMwLFxuXHRcdFx0J3onIDogMzEsXG5cdFx0XHQnWicgOiAzMSxcblx0XHR9ICxcblx0fSAsXG5cbn0gO1xuXG5mb3IgKCBjb25zdCB2YXJpYW50IGluIHZhcmlhbnRzICkge1xuXHRpZiAoIHZhcmlhbnRzW3ZhcmlhbnRdLmluZGV4ICkgY29udGludWUgO1xuXHR2YXJpYW50c1t2YXJpYW50XS5pbmRleCA9IG9iamVjdCggcmVmbGVjdCggZW51bWVyYXRlKCB2YXJpYW50c1t2YXJpYW50XS5hbHBoYWJldCApICkgKSA7XG59XG5cbnZhcmlhbnRzWydkZWZhdWx0J10gPSB2YXJpYW50c1snYmFzZTMyJ10gPSB2YXJpYW50c1snUkZDMzU0OCddID0gdmFyaWFudHNbJ1JGQzQ2NDgnXSA7XG52YXJpYW50c1snUkZDMjkzOCddID0gdmFyaWFudHNbJ2Jhc2UzMmhleCddIDtcbnZhcmlhbnRzWydDcm9ja2ZvcmQnXSA9IHZhcmlhbnRzWydjcm9ja2ZvcmQnXSA7XG5cbmV4cG9ydCBkZWZhdWx0IHZhcmlhbnRzIDtcbiJdfQ==