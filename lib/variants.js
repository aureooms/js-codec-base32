'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _jsItertools = require('@aureooms/js-itertools');

var _jsMapping = require('@aureooms/js-mapping');

var variants = {

	// standard ``base32''
	'RFC4648': {
		'alphabet': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
		'padding': '='
	},

	// also RFC4648 (used by NSEC3)
	// ``encoded data maintains its sort order when the encoded data is compared bit-wise''
	'base32hex': {
		'alphabet': '0123456789ABCDEFGHIJKLMNOPQRSTUV',
		'padding': '='
	},

	// ``easier for human use and more compact''
	'z-base-32': {
		'alphabet': 'ybndrfg8ejkmcpqxot1uwisza345h769',
		'padding': false
	},

	// It excludes the letters I, L, and O to avoid confusion with digits. It
	// also excludes the letter U to reduce the likelihood of accidental
	// obscenity.
	'Crockford': {
		'alphabet': '0123456789ABCDEFGHJKMNPQRSTVWXYZ',
		'padding': false,
		'index': {
			'0': 0,
			'o': 0,
			'O': 0,
			'1': 1,
			'i': 1,
			'I': 1,
			'l': 1,
			'L': 1,
			'2': 2,
			'3': 3,
			'4': 4,
			'5': 5,
			'6': 6,
			'7': 7,
			'8': 8,
			'9': 9,
			'a': 10,
			'A': 10,
			'b': 11,
			'B': 11,
			'c': 12,
			'C': 12,
			'd': 13,
			'D': 13,
			'e': 14,
			'E': 14,
			'f': 15,
			'F': 15,
			'g': 16,
			'G': 16,
			'h': 17,
			'H': 17,
			'j': 18,
			'J': 18,
			'k': 19,
			'K': 19,
			'm': 20,
			'M': 20,
			'n': 21,
			'N': 21,
			'p': 22,
			'P': 22,
			'q': 23,
			'Q': 23,
			'r': 24,
			'R': 24,
			's': 25,
			'S': 25,
			't': 26,
			'T': 26,
			'v': 27,
			'V': 27,
			'w': 28,
			'W': 28,
			'x': 29,
			'X': 29,
			'y': 30,
			'Y': 30,
			'z': 31,
			'Z': 31
		}
	}

};

for (var variant in variants) {
	if (variants[variant].index) continue;
	variants[variant].index = (0, _jsMapping.object)((0, _jsMapping.reflect)((0, _jsItertools.enumerate)(variants[variant].alphabet)));
}

exports.default = variants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YXJpYW50cy5qcyJdLCJuYW1lcyI6WyJ2YXJpYW50cyIsInZhcmlhbnQiLCJpbmRleCIsImFscGhhYmV0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQTs7QUFFQSxJQUFNQSxXQUFXOztBQUVoQjtBQUNBLFlBQVk7QUFDWCxjQUFhLGtDQURGO0FBRVgsYUFBWTtBQUZELEVBSEk7O0FBUWhCO0FBQ0E7QUFDQSxjQUFjO0FBQ2IsY0FBYSxrQ0FEQTtBQUViLGFBQVk7QUFGQyxFQVZFOztBQWVoQjtBQUNBLGNBQWM7QUFDYixjQUFhLGtDQURBO0FBRWIsYUFBWTtBQUZDLEVBaEJFOztBQXFCaEI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNiLGNBQWEsa0NBREE7QUFFYixhQUFZLEtBRkM7QUFHYixXQUFVO0FBQ1QsUUFBTSxDQURHO0FBRVQsUUFBTSxDQUZHO0FBR1QsUUFBTSxDQUhHO0FBSVQsUUFBTSxDQUpHO0FBS1QsUUFBTSxDQUxHO0FBTVQsUUFBTSxDQU5HO0FBT1QsUUFBTSxDQVBHO0FBUVQsUUFBTSxDQVJHO0FBU1QsUUFBTSxDQVRHO0FBVVQsUUFBTSxDQVZHO0FBV1QsUUFBTSxDQVhHO0FBWVQsUUFBTSxDQVpHO0FBYVQsUUFBTSxDQWJHO0FBY1QsUUFBTSxDQWRHO0FBZVQsUUFBTSxDQWZHO0FBZ0JULFFBQU0sQ0FoQkc7QUFpQlQsUUFBTSxFQWpCRztBQWtCVCxRQUFNLEVBbEJHO0FBbUJULFFBQU0sRUFuQkc7QUFvQlQsUUFBTSxFQXBCRztBQXFCVCxRQUFNLEVBckJHO0FBc0JULFFBQU0sRUF0Qkc7QUF1QlQsUUFBTSxFQXZCRztBQXdCVCxRQUFNLEVBeEJHO0FBeUJULFFBQU0sRUF6Qkc7QUEwQlQsUUFBTSxFQTFCRztBQTJCVCxRQUFNLEVBM0JHO0FBNEJULFFBQU0sRUE1Qkc7QUE2QlQsUUFBTSxFQTdCRztBQThCVCxRQUFNLEVBOUJHO0FBK0JULFFBQU0sRUEvQkc7QUFnQ1QsUUFBTSxFQWhDRztBQWlDVCxRQUFNLEVBakNHO0FBa0NULFFBQU0sRUFsQ0c7QUFtQ1QsUUFBTSxFQW5DRztBQW9DVCxRQUFNLEVBcENHO0FBcUNULFFBQU0sRUFyQ0c7QUFzQ1QsUUFBTSxFQXRDRztBQXVDVCxRQUFNLEVBdkNHO0FBd0NULFFBQU0sRUF4Q0c7QUF5Q1QsUUFBTSxFQXpDRztBQTBDVCxRQUFNLEVBMUNHO0FBMkNULFFBQU0sRUEzQ0c7QUE0Q1QsUUFBTSxFQTVDRztBQTZDVCxRQUFNLEVBN0NHO0FBOENULFFBQU0sRUE5Q0c7QUErQ1QsUUFBTSxFQS9DRztBQWdEVCxRQUFNLEVBaERHO0FBaURULFFBQU0sRUFqREc7QUFrRFQsUUFBTSxFQWxERztBQW1EVCxRQUFNLEVBbkRHO0FBb0RULFFBQU0sRUFwREc7QUFxRFQsUUFBTSxFQXJERztBQXNEVCxRQUFNLEVBdERHO0FBdURULFFBQU0sRUF2REc7QUF3RFQsUUFBTSxFQXhERztBQXlEVCxRQUFNLEVBekRHO0FBMERULFFBQU0sRUExREc7QUEyRFQsUUFBTSxFQTNERztBQTREVCxRQUFNO0FBNURHO0FBSEc7O0FBeEJFLENBQWpCOztBQTZGQSxLQUFNLElBQU1DLE9BQVosSUFBdUJELFFBQXZCLEVBQWtDO0FBQ2pDLEtBQUtBLFNBQVNDLE9BQVQsRUFBa0JDLEtBQXZCLEVBQStCO0FBQy9CRixVQUFTQyxPQUFULEVBQWtCQyxLQUFsQixHQUEwQix1QkFBUSx3QkFBUyw0QkFBV0YsU0FBU0MsT0FBVCxFQUFrQkUsUUFBN0IsQ0FBVCxDQUFSLENBQTFCO0FBQ0E7O2tCQUVjSCxRIiwiZmlsZSI6InZhcmlhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW51bWVyYXRlIH0gZnJvbSAnQGF1cmVvb21zL2pzLWl0ZXJ0b29scycgO1xuXG5pbXBvcnQgeyBvYmplY3QgLCByZWZsZWN0IH0gZnJvbSAnQGF1cmVvb21zL2pzLW1hcHBpbmcnIDtcblxuY29uc3QgdmFyaWFudHMgPSB7XG5cblx0Ly8gc3RhbmRhcmQgYGBiYXNlMzInJ1xuXHQnUkZDNDY0OCcgOiB7XG5cdFx0J2FscGhhYmV0JyA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2NycgLFxuXHRcdCdwYWRkaW5nJyA6ICc9JyAsXG5cdH0gLFxuXG5cdC8vIGFsc28gUkZDNDY0OCAodXNlZCBieSBOU0VDMylcblx0Ly8gYGBlbmNvZGVkIGRhdGEgbWFpbnRhaW5zIGl0cyBzb3J0IG9yZGVyIHdoZW4gdGhlIGVuY29kZWQgZGF0YSBpcyBjb21wYXJlZCBiaXQtd2lzZScnXG5cdCdiYXNlMzJoZXgnIDoge1xuXHRcdCdhbHBoYWJldCcgOiAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVYnICxcblx0XHQncGFkZGluZycgOiAnPScgLFxuXHR9ICxcblxuXHQvLyBgYGVhc2llciBmb3IgaHVtYW4gdXNlIGFuZCBtb3JlIGNvbXBhY3QnJ1xuXHQnei1iYXNlLTMyJyA6IHtcblx0XHQnYWxwaGFiZXQnIDogJ3libmRyZmc4ZWprbWNwcXhvdDF1d2lzemEzNDVoNzY5JyAsXG5cdFx0J3BhZGRpbmcnIDogZmFsc2UgLFxuXHR9ICxcblxuXHQvLyBJdCBleGNsdWRlcyB0aGUgbGV0dGVycyBJLCBMLCBhbmQgTyB0byBhdm9pZCBjb25mdXNpb24gd2l0aCBkaWdpdHMuIEl0XG5cdC8vIGFsc28gZXhjbHVkZXMgdGhlIGxldHRlciBVIHRvIHJlZHVjZSB0aGUgbGlrZWxpaG9vZCBvZiBhY2NpZGVudGFsXG5cdC8vIG9ic2Nlbml0eS5cblx0J0Nyb2NrZm9yZCcgOiB7XG5cdFx0J2FscGhhYmV0JyA6ICcwMTIzNDU2Nzg5QUJDREVGR0hKS01OUFFSU1RWV1hZWicgLFxuXHRcdCdwYWRkaW5nJyA6IGZhbHNlICxcblx0XHQnaW5kZXgnIDoge1xuXHRcdFx0JzAnIDogMCxcblx0XHRcdCdvJyA6IDAsXG5cdFx0XHQnTycgOiAwLFxuXHRcdFx0JzEnIDogMSxcblx0XHRcdCdpJyA6IDEsXG5cdFx0XHQnSScgOiAxLFxuXHRcdFx0J2wnIDogMSxcblx0XHRcdCdMJyA6IDEsXG5cdFx0XHQnMicgOiAyLFxuXHRcdFx0JzMnIDogMyxcblx0XHRcdCc0JyA6IDQsXG5cdFx0XHQnNScgOiA1LFxuXHRcdFx0JzYnIDogNixcblx0XHRcdCc3JyA6IDcsXG5cdFx0XHQnOCcgOiA4LFxuXHRcdFx0JzknIDogOSxcblx0XHRcdCdhJyA6IDEwLFxuXHRcdFx0J0EnIDogMTAsXG5cdFx0XHQnYicgOiAxMSxcblx0XHRcdCdCJyA6IDExLFxuXHRcdFx0J2MnIDogMTIsXG5cdFx0XHQnQycgOiAxMixcblx0XHRcdCdkJyA6IDEzLFxuXHRcdFx0J0QnIDogMTMsXG5cdFx0XHQnZScgOiAxNCxcblx0XHRcdCdFJyA6IDE0LFxuXHRcdFx0J2YnIDogMTUsXG5cdFx0XHQnRicgOiAxNSxcblx0XHRcdCdnJyA6IDE2LFxuXHRcdFx0J0cnIDogMTYsXG5cdFx0XHQnaCcgOiAxNyxcblx0XHRcdCdIJyA6IDE3LFxuXHRcdFx0J2onIDogMTgsXG5cdFx0XHQnSicgOiAxOCxcblx0XHRcdCdrJyA6IDE5LFxuXHRcdFx0J0snIDogMTksXG5cdFx0XHQnbScgOiAyMCxcblx0XHRcdCdNJyA6IDIwLFxuXHRcdFx0J24nIDogMjEsXG5cdFx0XHQnTicgOiAyMSxcblx0XHRcdCdwJyA6IDIyLFxuXHRcdFx0J1AnIDogMjIsXG5cdFx0XHQncScgOiAyMyxcblx0XHRcdCdRJyA6IDIzLFxuXHRcdFx0J3InIDogMjQsXG5cdFx0XHQnUicgOiAyNCxcblx0XHRcdCdzJyA6IDI1LFxuXHRcdFx0J1MnIDogMjUsXG5cdFx0XHQndCcgOiAyNixcblx0XHRcdCdUJyA6IDI2LFxuXHRcdFx0J3YnIDogMjcsXG5cdFx0XHQnVicgOiAyNyxcblx0XHRcdCd3JyA6IDI4LFxuXHRcdFx0J1cnIDogMjgsXG5cdFx0XHQneCcgOiAyOSxcblx0XHRcdCdYJyA6IDI5LFxuXHRcdFx0J3knIDogMzAsXG5cdFx0XHQnWScgOiAzMCxcblx0XHRcdCd6JyA6IDMxLFxuXHRcdFx0J1onIDogMzEsXG5cdFx0fSAsXG5cdH0gLFxuXG59IDtcblxuZm9yICggY29uc3QgdmFyaWFudCBpbiB2YXJpYW50cyApIHtcblx0aWYgKCB2YXJpYW50c1t2YXJpYW50XS5pbmRleCApIGNvbnRpbnVlIDtcblx0dmFyaWFudHNbdmFyaWFudF0uaW5kZXggPSBvYmplY3QoIHJlZmxlY3QoIGVudW1lcmF0ZSggdmFyaWFudHNbdmFyaWFudF0uYWxwaGFiZXQgKSApICkgO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YXJpYW50cyA7XG4iXX0=